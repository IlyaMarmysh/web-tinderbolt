const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mode = null;
        this.list = [];
    }

    async start(msg){
        this.mode = "main"
        const text = this.loadMessage("main");
        await this.sendImage("main")
        await this.sendText(`${text}`)
        await this.showMainMenu({
            "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
            "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
            "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
            "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
            "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
            "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT",
        })
    }

    async html(msg){
        await this.sendHTML(`<h3>ssss</h3>`)
        const html = this.loadHtml("main");
        await this.sendHTML(html, {theme:"dark"})
    }

    async gpt(msg) {
        this.mode = "gpt"
        await this.sendImage("gpt")
        const text = this.loadMessage("gpt");
        await this.sendText(`${text}`)
    }

    async gptDialog(msg) {
        const text = msg.text;
        await this.sendImage("gpt")
        const myMessage = await this.sendText("–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–∞–∫–æ–≤...")
        const answer = await chatgpt.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", text)
        await this.editText(myMessage, answer)
    }

    async date(msg){
        this.mode = "date";
        await this.sendImage("date")
        const text = this.loadMessage("date");
        await this.sendTextButtons("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:",{
            "date_grande":"–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
            "date_robbie":"–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya":"–ó–µ–Ω–¥–µ—è",
            "date_gosling":"–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy":"–¢–æ–º –•–∞—Ä–¥–∏",
        })
    }

    async dateButton(callbackQuery){
        const query = callbackQuery.data;
        await this.sendImage(query)
        await this.sendText("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä. –ü—Ä–∏–≥–ª–∞—Å–∏ –∑–≤–µ–∑–¥—É –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ –ø—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π:")
        const prompt = this.loadPrompt(query);
        chatgpt.setPrompt(prompt)
    }

    async dateDialog(msg){
        const text = msg.text;
        const myMessage = await this.sendText("–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        const answer = await chatgpt.addMessage(text);
        await this.editText(myMessage, answer)
    }
    async message(msg){
        this.mode = "message";
        await this.sendImage("message")
        const text = this.loadMessage("message");
        await this.sendText(`${text}`)
        await this.sendTextButtons("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:",{
            "message_date":"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
            "message_next":"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        })

    }
    async messageDialog(msg){
        const text = msg.text;
        this.list.push(text)
    }

    async messageButton(callbackQuery){
        const query = callbackQuery.data;
        const prompt = this.loadPrompt(query);
        const userChatHistory = this.list.join("\n\n");
        const myMessage = await this.sendText("ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
        const answer = await chatgpt.sendQuestion(prompt, userChatHistory)
        await this.editText(myMessage, answer)
        await this.sendTextButtons("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π?",{
            "clear_message":"–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å.",
        })
    }
    async clear(){
        console.log(this.list)
        this.list = [];
        console.log(this.list)
        await this.sendText("–í–∞—à–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.")
    }

    async hello(msg){
        if (this.mode === "gpt")
            await this.gptDialog(msg)
        else if(this.mode === "date")
            await this.dateDialog(msg)
        else if(this.mode === "message")
            await this.messageDialog(msg)
        else{
            const text = msg.text;
            await this.sendText("<b>–ü—Ä–∏–≤–µ—Ç!</b>")
            await this.sendText("<i>–ö–∞–∫ –¥–µ–ª–∞?</i>")
            await this.sendText(`–í—ã –ø–∏—Å–∞–ª–∏: ${text}`)
            await this.sendImage("avatar_main")
            await this.sendTextButtons("–ö–∞–∫–∞—è —É –≤–∞—Å —Ç–µ–º–∞ –≤ –¢–ì?",{
                "theme_light":"—Å–≤–µ—Ç–ª–∞—è",
                "theme_dark":"—Ç–µ–º–Ω–∞—è",
            })
        }
    }

    async helloButton(callbackQuery){
        const query = callbackQuery.data;
        if (query === "theme_light")
            await this.sendText("–£ –≤–∞—Å —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")
        else if (query === "theme_dark")
            await this.sendText("–£ –≤–∞—Å —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞")
    }
}

const chatgpt = new ChatGptService("gpt:h4CQINi3RUNETJprJI4HJFkblB3TYAWTNapKtwbtLBVoSgEz")
const bot = new MyTelegramBot("6702043005:AAERdHw5foeBKuBxFoclc73mtvBqD2tWGtU");

bot.onCommand(/\/start/ , bot.start)
bot.onCommand(/\/date/ , bot.date)
bot.onCommand(/\/message/ , bot.message)
bot.onCommand(/\/gpt/ , bot.gpt)
bot.onCommand(/\/html/ , bot.html)

bot.onTextMessage(bot.hello)
bot.onButtonCallback( /^clear_.*/ , bot.clear)
bot.onButtonCallback( /^date_.*/ , bot.dateButton )
bot.onButtonCallback( /^message_.*/ , bot.messageButton )
bot.onButtonCallback( /^.*/ , bot.helloButton )
